[ Django 사용법 (Model) ]
- project05



[ db와 연결하기 ]
- 장고에서 모델을 사용 및 수정 하고자 한다면 makemigrations 필요 
 (mysite에 앱을 등록해야 됨)
- makemigrations 이후 다시 py manage.py migrate 를 동작시켜줘야 
  작성한 클래스가 적용된다.

- 동작 순서
py manage.py migrate로 db연동 => Model에서 클래스 생성 및 수정 
=> py manage.py makemigrations => 이 후  =>  py manage.py migrate




[ admin ]
- 장고에서 admin은 모델을 관리하는 역할을 한다.
- db 에 저장된 자료를 바탕으로 구동된다.
- DB Browser for SQLite 에서 보면서 확인을 하는 방법과
   관리자사이트에서 확인을 하는 두 가지 방법이 있다.

- admin.py 에서 내가 사용하는 모델을 등록해 주면 관리자사이트에서 확인할 수 있다.
	from .models import Info
	admin.site.register(Info)   # 관리자 사이트에 모델 등록




[ 장고 쉘(shell) ]
- SQL 사용하지 않고 모델에 관련된 함수들을 확인.
  (INSERT, SELECT, UPDATE, DELETE 와 같은 기능)
- ORM 기법을 통해 내 프로젝트를 대상으로 쉘을 구동. ★파이썬 코드 형태★로 모델 클래스를 다룰 수 있다. 


py manage.py shell						| 장고 쉘 구동 

from ex_model.models import Info				| 클래스 Info 를  import 


< Info 객체를 생성, 삽입 방법 2 가지 >	## INSERT
Info(name='원빈', age=38, intro='CG')				| Info 객체 생성 및 저장방법 1 
info = Info(name='원빈', age=38, intro='CG')			| 아직 db에 저장은 안된상태 
info.save()							| info 객체를 save, 데이터베이스에 저장  

Info.objects.create(name='공유', age=66, intro='도깨비')		| Info 생성 및 저장방법 2 
								| db에 바로 저장

< 값을 조회하는 방법 >			## SELECT
Info.objects.all()						| 모든 요소를 가져온다. (가져온 결과는 list)
Info.objects.get(id=1)	or (pk=3) or ...			| 특정 정보만 조회하기 (get: 단일요소)
- a = Info.objects.get(id=1)					| ( ) 안에 조건을 작성한다.
- a.age | a.name | a.regdate

>> get은 없는 값 조회 시 예외가 발생하여 try ~ except 를 적용할 수 있다. (반드시 1개 값 이상을 조회해야 된다.)
   filter는 없는 값 조회해도 예외가 발생하지 않는다. (빈 쿼리문 출력됨)
>> Info.objects.all() 결과는 집합자료(QuerySet). 그 결과를 변수로 담아서 함수 사용가능
   ex) ls = Info.objects.all()					| 전체목록을 가져온 것 뿐 순서는 의미가 없다.
       ls.count()

Info.objects.filter(name='홍길동') 				| 0개 이상의 값을 조회 가능하다.
								| 결과가 < QuerySet [] > 으로 출력된다.
Info.objects.filter(name__contains='홍')				| name 컬럼의 값 중 '홍' 이 있는 값을 찾는다.
Info.objects.filter(name__contains='홍', age=25)			| ★ AND 연산(,) (이름 중 '홍'과 나이 25살)	
Info.objects.filter(age__lt=40)					| 나이가 40보다 작은 사람? ( age < 40 )	
Info.objects.filter(age__lte=40)				| 나이가 40보다 작거나 같은 사람? ( age <= 40 )
Info.objects.filter(age__gt=40)					| 나이가 40보다 큰 사람? ( age > 40 )
Info.objects.filter(name__startswith='홍')			| '홍'으로 시작하는 사람?
Info.objects.filter(name__endswith='동')				| '동'으로 끝나는 사람?

from django.db.models import Q					| ★ OR 연산(|) 을 사용하고자 할 때
Info.objects.filter(Q(name__contains='홍') | Q(age=66))		| Q 객체를 생성.  | 로  or 연산 진행


< 값을 정렬하는 방법 >
Info.objects.all().order_by()					| ...all().order_by(정렬 기준)	

Info.objects.all().order_by('id')				| id를 기준으로 오름차순 정렬
Info.objects.all().order_by('-id')				| id를 기준으로 내림차순 정렬
				
filter와 함께 사용
Info.objects.filter(age__gte=56).order_by('-name')		| 가져온 값 중 이름을 내림차순으로 정렬
Info.objects.filter(id__lte=3).order_by('age')			| 가져온 값 중 나이를 오름차순으로 정렬


< 값을 업데이트 하는 방법 2 가지> 		## UPDATE		| 변경할 모델 객체를 선택하고 업데이트 진행.
Info.objects.get(age=23)					| get 으로 업데이트 방법 1
q = Info.objects.get(age=23)
q.age=24							| q객체의 나이를 24로 변경함.
q.save()							| save() 해야 db에도 변경 값이 반영됨.

Info.objects.filter(age=24)					| QuerySet 결과를 활용하는 방법 2
Info.objects.filter(age=24).update(name='김길동', age=38)	| QuerySet의 update를 이용하여 값을 변경


< 값을 삭제하는 방법 >			## DELETE
Info.objects.filter(name='이성계')				| QuerySet을 활용
Info.objects.filter(name='이성계').delete()			| QuerySet의 delete를 이용하여 값을 삭제
					
Info.objects.get(id=2).delete()					| 객체에서 값 저장 시 	.save()
								| 객체에서 값 삭제 시 	.delete()





























