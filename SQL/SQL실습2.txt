제약조건을 추가한 테이블 정의

방법1(컬럼 레벨 설정)
CREATE TABLE "INFO"(
 "ID" NUMBER PRIMARY KEY,
 "NAME" VARCHAR2(100) NOT NULL,
 "BIRTH" DATE,
 "BTYPE" CHAR(5)
);

방법2(테이블 레벨 설정. 여러 컬럼을 대상으로 제약조건을 설정하는 경우 활용)
CREATE TABLE "SUBJECT" (
 "SUB_CODE" NUMBER,
 "NAME" VARCHAR2(50) NOT NULL,
 CONSTRAINT "PK_SUBJECT" PRIMARY KEY ("SUB_CODE")
);

방법3(테이블 생성 후 추가)
CREATE TABLE "SCORE" (
 "ID" NUMBER,
 "INFO_ID" NUMBER,
 "SUBJECT_CODE" NUMBER,
 "SUBJECT_SCORE" NUMBER(5,2),
 CONSTRAINT "FK_INFO_ID" FOREIGN KEY("INFO_ID") REFERENCES "INFO"("ID") ON DELETE CASCADE
);

--ALTER TABLE "INFO" MODIFY "BTYPE" NOT NULL;
ALTER TABLE "SCORE" ADD CONSTRAINT "PK_SCORE" PRIMARY KEY ("ID");
ALTER TABLE "SCORE" ADD CONSTRAINT "FK_SUBJECT_CODE" FOREIGN KEY("SUBJECT_CODE") REFERENCES "SUBJECT"("SUB_CODE") ON DELETE CASCADE;


ON DELETE CASCADE옵션을 지정하지 않은 경우 참조하는 대상 삭제가 불가함(DEFAULT)
ON DELETE CASCADE옵션은 참조 대상이 삭제되는 경우 대상을 참조하는 값들도 제거하도록 하는 옵션


테이블 생성 확인
DESC "INFO";
DESC "SUBJECT";
DESC "SCORE";

샘플 스키마(데이터) 삽입
학생 10명
과목 5개
점수 20개

DELETE FROM "INFO";
DELETE FROM "SUBJECT";
DELETE FROM "SCORE";

INSERT INTO "INFO" VALUES (1, '홍길동', '1443/01/01', 'B');
INSERT INTO "INFO" VALUES (2, '이순신', '1545-4-28', 'A');
INSERT INTO "INFO" VALUES (3, '강감찬', '0948-12-22', 'A');
INSERT INTO "INFO" VALUES (4, '임꺽정', '1521-10-10', 'O');
INSERT INTO "INFO" VALUES (5, '장보고', '2020-12-23', 'O');
INSERT INTO "INFO" VALUES (6, '신사임당', '1504-12-05', 'AB');
INSERT INTO "INFO" VALUES (7, '장영실', '1399-12-31');
INSERT INTO "INFO" VALUES (8, '정도전', '1342-10-06', 'A');
INSERT INTO "INFO" VALUES (9, '김유신', '595-05-09', 'O');
INSERT INTO "INFO" VALUES (10, '박혁거세', '0069-07-12', 'B');

INSERT INTO "SUBJECT" VALUES (1, 'JAVA');
INSERT INTO "SUBJECT" VALUES (2, 'JSP');
INSERT INTO "SUBJECT" VALUES (3, 'DATABASE');
INSERT INTO "SUBJECT" VALUES (4, 'SPRING');
INSERT INTO "SUBJECT" VALUES (5, 'NETWORK');

INSERT INTO "SCORE" VALUES (1, 1, 1, 100);
INSERT INTO "SCORE" VALUES (2, 1, 2, 90);
INSERT INTO "SCORE" VALUES (3, 1, 3, 34);
INSERT INTO "SCORE" VALUES (4, 2, 1, 77);
INSERT INTO "SCORE" VALUES (5, 2, 5, 56);
INSERT INTO "SCORE" VALUES (6, 3, 2, 78);
INSERT INTO "SCORE" VALUES (7, 4, 1, 39);
INSERT INTO "SCORE" VALUES (8, 4, 2, 59);
INSERT INTO "SCORE" VALUES (9, 4, 4);
INSERT INTO "SCORE" VALUES (10, 4, 5, 12);
INSERT INTO "SCORE" VALUES (11, 5, 1, 82);
INSERT INTO "SCORE" VALUES (12, 5, 3, 98);
INSERT INTO "SCORE" VALUES (13, 6, 1, 91);
INSERT INTO "SCORE" VALUES (14, 6, 5, 68);
INSERT INTO "SCORE" VALUES (15, 7, 2, 71);
INSERT INTO "SCORE" VALUES (16, 7, 3, 68);
INSERT INTO "SCORE" VALUES (17, 7, 4, 59);
INSERT INTO "SCORE" VALUES (18, 8, 1, 98);
INSERT INTO "SCORE" VALUES (19, 8, 5, 10);
INSERT INTO "SCORE" VALUES (20, 9, 1, 47);

시퀀스 활용하기 (SEQUENCE : 숫자를 증가시키는 역할)
CREATE SEQUENCE "SEQ_TEST1";			(SEQUENCE 생성)
SELECT 1+1 FROM DUAL;				(DUAL : 가상의 테이블)
SELECT "SEQ_TEST1".NEXTVAL FROM DUAL; 	(값을 1씩 증가시킴)
SELECT "SEQ_TEST1".CURRVAL FROM DUAL;	(현재 값이 얼마인지를 가져옴)
DROP SEQUENCE "SEQ_TEST1";			(SEQUENCE 삭제)


CREATE SEQUENCE "SEQ_TEST2";
SELECT "SEQ_TEST2".NEXTVAL FROM DUAL; 
SELECT "SEQ_TEST2".CURRVAL FROM DUAL; /* 반드시 1번 이상 NEXTVAL동작이 되어야 가능 */

CREATE SEQUENCE "SEQ_TEST3" START WITH 10 INCREMENT BY 2 NOCACHE;
SELECT "SEQ_TEST3".NEXTVAL FROM DUAL; 


사용할 시퀀스 생성
CREATE SEQUENCE "SEQ_INFO" NOCACHE;
CREATE SEQUENCE "SEQ_SUBJECT" NOCACHE;
CREATE SEQUENCE "SEQ_SCORE" NOCACHE;

INSERT INTO "INFO" VALUES ("SEQ_INFO".NEXTVAL, '홍길동', '1443/01/01', 'B');
INSERT INTO "INFO" VALUES ("SEQ_INFO".NEXTVAL, '이순신', '1545-4-28', 'A');
INSERT INTO "INFO" VALUES ("SEQ_INFO".NEXTVAL, '강감찬', '0948-12-22', 'A');
INSERT INTO "INFO" VALUES ("SEQ_INFO".NEXTVAL, '임꺽정', '1521-10-10', 'O');
INSERT INTO "INFO" VALUES ("SEQ_INFO".NEXTVAL, '장보고', '2020-12-23', 'O');
INSERT INTO "INFO" VALUES ("SEQ_INFO".NEXTVAL, '신사임당', '1504-12-05', 'AB');
INSERT INTO "INFO" VALUES ("SEQ_INFO".NEXTVAL, '장영실', '1399-12-31');
INSERT INTO "INFO" VALUES ("SEQ_INFO".NEXTVAL, '정도전', '1342-10-06', 'A');
INSERT INTO "INFO" VALUES ("SEQ_INFO".NEXTVAL, '김유신', '595-05-09', 'O');
INSERT INTO "INFO" VALUES ("SEQ_INFO".NEXTVAL, '박혁거세', '0069-07-12', 'B');

INSERT INTO "SUBJECT" VALUES ("SEQ_SUBJECT".NEXTVAL, 'JAVA');
INSERT INTO "SUBJECT" VALUES ("SEQ_SUBJECT".NEXTVAL, 'JSP');
INSERT INTO "SUBJECT" VALUES ("SEQ_SUBJECT".NEXTVAL, 'DATABASE');
INSERT INTO "SUBJECT" VALUES ("SEQ_SUBJECT".NEXTVAL, 'SPRING');
INSERT INTO "SUBJECT" VALUES ("SEQ_SUBJECT".NEXTVAL, 'NETWORK');

INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 1, 1, 100);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 1, 2, 90);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 1, 3, 34);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 2, 1, 77);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 2, 5, 56);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 3, 2, 78);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 4, 1, 39);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 4, 2, 59);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 4, 4);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 4, 5, 12);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 5, 1, 82);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 5, 3, 98);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 6, 1, 91);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 6, 5, 68);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 7, 2, 71);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 7, 3, 68);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 7, 4, 59);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 8, 1, 98);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 8, 5, 10);
INSERT INTO "SCORE" VALUES ("SEQ_SCORE".NEXTVAL, 9, 1, 47);



집계함수
SELECT COUNT(*) FROM "INFO" WHERE BTYPE='A';
SELECT COUNT(*) FROM "INFO" WHERE BTYPE='A' GROUP BY "BTYPE";

SELECT "SUBJECT_SCORE" AS "자바점수" FROM "SCORE" WHERE "SUBJECT_CODE"=1;

SELECT COUNT(*) FROM "SCORE"; 			/* NULL도 개수에 포함 */
SELECT COUNT("SUBJECT_SCORE") FROM "SCORE"; 	/* NULL 포함하지 않음 */

SELECT COUNT("SUBJECT_SCORE") FROM "SCORE" WHERE "SUBJECT_CODE"=1;
SELECT MAX("SUBJECT_SCORE") FROM "SCORE" WHERE "SUBJECT_CODE"=1;
SELECT MIN("SUBJECT_SCORE") FROM "SCORE" WHERE "SUBJECT_CODE"=1;
SELECT SUM("SUBJECT_SCORE") FROM "SCORE" WHERE "SUBJECT_CODE"=1;
SELECT SUM("SUBJECT_SCORE")/7 FROM "SCORE" WHERE "SUBJECT_CODE"=1;
SELECT AVG("SUBJECT_SCORE") FROM "SCORE" WHERE "SUBJECT_CODE"=1;



GROUP BY 를 사용하기 위해선 집계함수와 함께 사용해야한다. 	ex) COUNT(*)와 함께 사용
SELECT COUNT(*) FROM "SCORE" GROUP BY "SUBJECT_CODE";
SELECT MAX("SUBJECT_SCORE") FROM "SCORE" GROUP BY "SUBJECT_CODE"; 	/* 과목 중 최고 점수*/
SELECT SUM("SUBJECT_SCORE") FROM "SCORE" GROUP BY "SUBJECT_CODE"; 	/* 과목 별 총점 */
SELECT AVG("SUBJECT_SCORE") FROM "SCORE" GROUP BY "SUBJECT_CODE"; 	/* 과목 별 평균 */

SELECT AVG("SUBJECT_SCORE") FROM "SCORE" GROUP BY "INFO_ID";
SELECT COUNT(*) FROM "SCORE" GROUP BY "INFO_ID";
SELECT SUM("SUBJECT_SCORE") FROM "SCORE" WHERE "INFO_ID"=4 GROUP BY "INFO_ID";
SELECT AVG("SUBJECT_SCORE") FROM "SCORE" WHERE "INFO_ID"=4 GROUP BY "INFO_ID";



HAVING = GROUP BY를 통해 그룹을 형성 후 HAVING 으로 조건을 부여한다.
SELECT SUM("SUBJECT_SCORE") FROM "SCORE" GROUP BY "INFO_ID" HAVING "INFO_ID"=3;
SELECT SUM("SUBJECT_SCORE") FROM "SCORE" GROUP BY "SUBJECT_CODE" HAVING "SUBJECT_CODE"=3;

SELECT COUNT("SUBJECT_SCORE") FROM "SCORE" GROUP BY "SUBJECT_CODE" HAVING "SUBJECT_CODE"=3;
SELECT COUNT("SUBJECT_SCORE") FROM "SCORE" GROUP BY "SUBJECT_CODE" HAVING "SUBJECT_CODE"=1;

SELECT COUNT(*) FROM "INFO" WHERE "ID" < 5 GROUP BY "BTYPE" HAVING COUNT(*) >= 1;
SELECT COUNT(*) FROM "INFO" WHERE "BIRTH" > '1000-01-01' GROUP BY "BTYPE" HAVING COUNT(*) >= 2;



서브 쿼리 (쿼리문 안에 쿼리문을 작성)
SELECT "ID", "INFO_ID", "SUBJECT_CODE", "SUBJECT_SCORE" FROM "SCORE" WHERE "SUBJECT_CODE"=1 AND "SUBJECT_SCORE" = 100;
SELECT "NAME" FROM "INFO" WHERE "ID"=1;
SELECT "NAME" FROM "SUBJECT" WHERE "SUB_CODE"=1;

SELECT 
    "ID", 
    (SELECT "NAME" FROM "INFO" WHERE "ID"="SCORE"."INFO_ID"), 
    (SELECT "NAME" FROM "SUBJECT" WHERE "SUB_CODE"="SCORE"."SUBJECT_CODE"), 
    "SUBJECT_SCORE" 
    FROM "SCORE" 
        WHERE "SUBJECT_CODE"=1 AND "SUBJECT_SCORE" = 100;

SELECT 
    "ID",							   	(AS는 서브쿼리의 결과물 컬럼 이름을 결정)
    (SELECT "NAME" FROM "INFO" WHERE "ID"="SC"."INFO_ID") AS "학생", 	
    (SELECT "NAME" FROM "SUBJECT" WHERE "SUB_CODE"="SC"."SUBJECT_CODE") AS "과목", 
    "SUBJECT_SCORE" 
    FROM "SCORE" "SC"						(SC는 별칭)
        WHERE "SUBJECT_CODE"=1 AND "SUBJECT_SCORE" > 90;



조인 (서로 다른 테이블의 정보를 한 테이블에서 가져온 결과인 것 처럼 출력하기 위함)
SELECT * FROM "SCORE", "SUBJECT";
SELECT * FROM "SCORE", "SUBJECT" WHERE "SCORE".SUBJECT_CODE="SUBJECT".SUB_CODE;
SELECT * FROM "SCORE" JOIN "SUBJECT" ON("SCORE".SUBJECT_CODE="SUBJECT".SUB_CODE);
SELECT * FROM "SCORE" JOIN "SUBJECT" ON("SCORE".SUBJECT_CODE="SUBJECT".SUB_CODE) ORDER BY "ID";

SELECT "SC"."INFO_ID", "SB"."NAME", "SC"."SUBJECT_SCORE" 
    FROM "SCORE" "SC" JOIN "SUBJECT" "SB" ON("SC".SUBJECT_CODE="SB".SUB_CODE)
        WHERE "SC"."INFO_ID"=2;

SELECT (SELECT "NAME" FROM "INFO" WHERE "ID"="SC"."INFO_ID") AS "학생이름", 
	"SB"."NAME" AS "과목명", "SC"."SUBJECT_SCORE" AS "점수" 
    FROM "SCORE" "SC" JOIN "SUBJECT" "SB" ON("SC".SUBJECT_CODE="SB".SUB_CODE)
        WHERE "SC"."INFO_ID"=1;



시퀀스 사용 없이 PK 자동 증가 값 사용 방법(ORACLE 12C+)
CREATE TABLE "INFO"(
 "ID" NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1) PRIMARY KEY ,
 "NAME" VARCHAR2(100) NOT NULL,
 "BIRTH" DATE,
 "BTYPE" CHAR(5)
); 

INSERT INTO "INFO" ("NAME", "BIRTH", "BTYPE") VALUES ('홍길동', '1443/01/01', 'B');
INSERT INTO "INFO" ("NAME", "BIRTH", "BTYPE") VALUES ('이순신', '1545-4-28', 'A');
INSERT INTO "INFO" ("NAME", "BIRTH", "BTYPE") VALUES ('강감찬', '0948-12-22', 'A');
INSERT INTO "INFO" ("NAME", "BIRTH", "BTYPE") VALUES ('임꺽정', '1521-10-10', 'O');

